#!/usr/bin/env python

'''
Copyright (c) 2020 epiphani, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''

import subprocess
import sys
import json 
import os
import random
import argparse
import configparser
import string 
from tabulate import tabulate

PATH="./arena.config"
LOCAL_RESOURCES = {}
CLOUD_RESOURCES = {}

ENV_FILE=PATH+"/arena.cfg"
CLOUD_ENV_FILE=PATH+"/cloud-arena.cfg"
ENVCONFIG = {}
CLOUDCONFIG = {}

#can be fetched from the cloud 
RESOURCES = {
    'gcp-compute': {'name': 'gcp-compute', 'description': 'create compute in GCP cloud', 
        'args':{'region': 'us-west2', 'size': 'nano'}
    },
    'aws-compute': {'name': 'aws-compute', 'description': 'create compute in AWS cloud',
            'args':{'region': 'us-west-2', 'size': 'nano'}
    }
}

DEPENDENCIES = {
                "aws-vpc": ["aws-gateway", "aws-subnet"], 
                'aws-compute': ["aws-subnet"],

                "aws-vpc": ["aws-firewall", "aws-dns", "aws-cvpn"],
                "aws-subnet": ["aws-vpc"],
                }

PLAYBOOKS = {
    'aws-vpc': 'create-mc-aws-vpc',
    'aws-compute': 'create-mc-aws-compute',
    'aws-gateway': 'create-mc-aws-vpc',
    'aws-subnet': 'create-mc-aws-vpc',
    'aws-firewall': 'create-mc-aws-vpc',
    'aws-dns': 'create-mc-aws-vpc',
    'aws-cvpn': 'create-mc-aws-vpc',
}
def get_random_string(length):
    letters = string.ascii_lowercase
    result_str = ''.join(random.choice(letters) for i in range(length))
    return result_str

def readCloud():
    global CLOUDCONFIG
    try:
        with open(CLOUD_ENV_FILE, 'r') as json_file:
            CLOUDCONFIG = json.load(json_file)
    except: 
        print("Cloud not configured yet, applying")
        CLOUDCONFIG['id'] = ENVCONFIG['id']
        CLOUDCONFIG['resources'] = {}
def writeCloud():
    global CLOUDCONFIG
    with open(CLOUD_ENV_FILE, 'w') as json_file:
        json.dump(CLOUDCONFIG, json_file)   


def readEnv():
    global ENVCONFIG
    try:
        with open(ENV_FILE, 'r') as json_file:
            ENVCONFIG = json.load(json_file)
    except: 
        print("Please run `arena init` first")
        sys.exit(-1)  

def writeEnv():
    global ENVCONFIG
    with open(ENV_FILE, 'w') as json_file:
        json.dump(ENVCONFIG, json_file)   

def run(cmd):
    out = subprocess.Popen(cmd, 
               stdout=subprocess.PIPE, 
               stderr=subprocess.STDOUT)
    stdout,stderr = out.communicate()
    return stdout 

class MyParser(object):

    def __init__(self):
        self.config_args = {}
        parser = argparse.ArgumentParser(
            description='arena -> no code infrstructure ',
            usage='''arena <command> [<args>]
The following commands are supported:
    add       add resource to the arena 
    remove    remove resource from the arena 
    init      initialize a new arena 
    apply     apply the changes to the cloud 

Please create a config file ~/.arena.ini with following content:
[DEFAULT]
username = <epiphani username>
password = <epiphani password> 
login = URL to epiphani
log_file = foo.log
''')
        config = configparser.ConfigParser()
        FN = os.path.expanduser('~/.arena.ini')
        config.read(FN)
        for key in config['DEFAULT']:
            self.config_args[key] = config['DEFAULT'][key]
        parser.add_argument('command', help='Subcommand to run')
        # parse_args defaults to [1:] for args, but you need to
        # exclude the rest of the args too, or validation will fail
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print 'Unrecognized command'
            parser.print_help()
            exit(1)
        # use dispatch pattern to invoke method with same name
        getattr(self, args.command)()

    def addKeys(self, args):
        d = vars(args)
        for key in self.config_args:
            d[key] = self.config_args[key]

    def init(self):
        #already existings - please check?
        try: 
            os.mkdir(PATH) 
        except OSError as error: 
            print(error) 

        id = get_random_string(8)
        ENVCONFIG['id'] = "arena-"+id
        ENVCONFIG['resources'] = {}
        writeEnv() 

    def add(self):
        global ENVCONFIG
        readEnv()
        parser = argparse.ArgumentParser(
            description="resources to add")
        s1 = parser.add_subparsers(title="resource", dest="resource")
        for key in RESOURCES.keys():
            ar = RESOURCES[key]
            st = s1.add_parser(ar['name'], help=ar['description'])
            st.add_argument('--vars',  dest="vars", required=False, help='the variables to pass to resource')
            st.add_argument('--name',  dest="rname", required=True, help='the name of the resource')
        args = parser.parse_args(sys.argv[2:])
        self.addKeys(args)
        addResource(args)

    def apply(self):
        global ENVCONFIG
        readEnv()
        parser = argparse.ArgumentParser(
            description="resources to apply")
        s1 = parser.add_argument('--yes',  action='store_true', dest="yes", required=False, help='assume yes')
        args = parser.parse_args(sys.argv[2:])
        self.addKeys(args)

        applyResource(args)

    def playbook(self):
        parser = argparse.ArgumentParser(
            description="playbook sub commands")
        s1 = parser.add_subparsers(title="commands", dest="command")
        s1.add_parser("show", help="show all the playbooks")
        pbn = s1.add_parser("run", help="run the playbooks")
        pbn.add_argument('--name',  dest="PBName", required=True, help='the name of the playbook to run')
        pbn.add_argument('--vars',  dest="PBVars", required=False, help='the variables to pass to playbook')
        pbn.add_argument('--json',  type=bool, required=False, help='output only json', default=False)

        args = parser.parse_args(sys.argv[2:])
        self.addKeys(args)
        playBook(args)

def addResource(args):
    selected = RESOURCES[args.resource]
    vars = args.vars 
    selArgs = selected['args']
    configArgs = selArgs
    constName = args.resource + "#"+args.rname 
    if (constName in ENVCONFIG['resources']):
        print "resource already exists, please remove it first"
        sys.exit(-1)
    print "Adding resource: %s [%s]" % (args.resource, args.rname)
    for key in selArgs.keys():
        if (vars and (key in vars)):
            configArgs[key] = vars[key]
        print "  %s: %s" % (key, configArgs[key])
    ENVCONFIG['resources'][constName] = {'resource': args.resource, 'name': args.rname, 'vars': configArgs}
    writeEnv()

def printDict(dict, header):
    arr = []
    for key in dict.keys():
        item = dict[key]
        ff = []
        for he in header:
            ff.append(item[he])
        arr.append(ff)
    print (tabulate(arr, headers=header))

def runPBs():
    pbs = {}
    applyConfig = CLOUDCONFIG['resources']
    # for key in applyConfig.keys():
    #     if (applyConfig[key]['operation'] == "Create"):
    #         pbs =
def applyResource(args):
    readCloud()
    for res in ENVCONFIG['resources'].keys():
        r = ENVCONFIG['resources'][res]
        deps = {}
        collectDependencies(deps, r['resource'], 0)
        for r in deps.keys():
            if r in ENVCONFIG['resources']:
                ENVCONFIG['resources'][r]['order'] = deps[r]
            else:
                ENVCONFIG['resources'][r] = {'order': deps[r], 'resource':r, 'name': r}

    applyConfig = CLOUDCONFIG['resources']
    # check against cloud
    for res in ENVCONFIG['resources'].keys():     
        if res in applyConfig:
            # check same or not ... 
            applyConfig[res]['operation'] = "No change"
        else:
            applyConfig[res] = ENVCONFIG['resources'][res]
            applyConfig[res]['operation'] = "Create"
    printDict(applyConfig, ['resource', 'name', 'operation'])
    print "\n"

    CLOUDCONFIG['resources'] = applyConfig
    if args.yes == False:
        yesno = raw_input("Configure in the cloud (y/n)?")
        yesno = yesno.lower()
        if (yesno != "y"):
            print "exiting"
            sys.exit(0)
    runPBs()

def collectDependencies(var, key, depth):
    if (depth>0):
        var[key] = depth 
    depth = depth + 1
    if key not in DEPENDENCIES:
        return 
    for ff in DEPENDENCIES[key]:
        var[ff] = depth

        collectDependencies(var, ff, depth)

def init():

    cmd = ["cat", "foo"]
    out = run(cmd)
    print ("OUTPUT IS ", out)
    dumpResources()

def doMain():
    MyParser()

if __name__ == '__main__':
    sys.exit(doMain())
