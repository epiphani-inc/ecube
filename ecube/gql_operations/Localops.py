# This is an auto-generated file, please do not modify

LOCALOPS = {'createallrunbooks': '\n  mutation createAllRunbooks($input: AllRunbooksCreateInput!) {\n    createAllRunbooks(data: $input) {\n        id \n        name \n        description \n        content \n        author \n        commands \n        createdAt \n        updatedAt \n        RunBookConnectors \n        type \n        longSave \n        rbVars \n        scope \n  }\n}',
 'createbase64image': '\n  mutation createBase64Image($input: Base64ImageCreateInput!) {\n    createBase64Image(data: $input) {\n        id \n        playbookID \n        base64String \n        createdAt \n        updatedAt \n  }\n}',
 'createcomment': '\n  mutation createComment($input: CommentCreateInput!) {\n    createComment(data: $input) {\n        id \n        parent \n        createdAt \n        updatedAt \n        author \n        content \n        type \n        links \n        investigation  {\n          id \n          title \n          from \n          createdAt \n          currentState \n          HumanID \n          severity \n          priority \n          location \n          updatedAt \n          resolvedTime \n          resolvedComment \n  }\n\n        investigationId \n  }\n}',
 'createconnectorform': '\n  mutation createConnectorForm($input: ConnectorFormCreateInput!) {\n    createConnectorForm(data: $input) {\n        id \n        createdAt \n        updatedAt \n        name \n        connectorID \n        connector  {\n          id \n          createdAt \n          updatedAt \n          category \n          name \n          description \n          detaileddescription \n          iconPath \n          version \n          md5 \n          source \n          configuration \n          commands \n          commandsType \n          script \n          scriptType \n          scriptPath \n          owner \n  }\n\n        configData \n        commandData \n        nodeData \n        scope \n        owner \n  }\n}',
 'createconnectors': '\n  mutation createConnectors($input: ConnectorsCreateInput!) {\n    createConnectors(data: $input) {\n        id \n        createdAt \n        updatedAt \n        category \n        name \n        description \n        detaileddescription \n        iconPath \n        version \n        md5 \n        source \n        configuration \n        commands \n        commandsType \n        script \n        scriptType \n        scriptPath \n        owner \n  }\n}',
 'createexecutedrunbooks': '\n  mutation createExecutedRunbooks($input: ExecutedRunbooksCreateInput!) {\n    createExecutedRunbooks(data: $input) {\n        id \n        createdAt \n        updatedAt \n        runbookID \n        runbook  {\n          id \n          name \n          description \n          content \n          author \n          commands \n          createdAt \n          updatedAt \n          RunBookConnectors \n          type \n          longSave \n          rbVars \n          scope \n  }\n\n        investigationId \n        investigation  {\n          id \n          title \n          from \n          createdAt \n          currentState \n          HumanID \n          severity \n          priority \n          location \n          updatedAt \n          resolvedTime \n          resolvedComment \n  }\n\n        output \n        outputType \n        title \n        state \n        author \n        rbVars \n        callbackUrl \n        callbackData \n        source \n  }\n}',
 'createinvestigation': '\n  mutation createInvestigation($input: InvestigationCreateInput!) {\n    createInvestigation(data: $input) {\n        id \n        title \n        from \n        createdAt \n        currentState \n        HumanID \n        severity \n        priority \n        location \n        updatedAt \n        resolvedTime \n        resolvedComment \n  }\n}',
 'createinvestigationevent': '\n  mutation createInvestigationEvent($input: InvestigationEventCreateInput!) {\n    createInvestigationEvent(data: $input) {\n        id \n        createdAt \n        updatedAt \n        author \n        content \n        type \n        investigation  {\n          id \n          title \n          from \n          createdAt \n          currentState \n          HumanID \n          severity \n          priority \n          location \n          updatedAt \n          resolvedTime \n          resolvedComment \n  }\n\n        investigationId \n  }\n}',
 'createlabel': '\n  mutation createLabel($input: LabelCreateInput!) {\n    createLabel(data: $input) {\n        id \n        name \n        color \n        type \n  }\n}',
 'createnotification': '\n  mutation createNotification($input: NotificationCreateInput!) {\n    createNotification(data: $input) {\n        id \n        userName \n        content \n        containerType \n        containerId \n        investigationId \n        isViewed \n        createdAt \n        updatedAt \n  }\n}',
 'createremotecontrol': '\n  mutation createremoteControl($input: remoteControlCreateInput!) {\n    createremoteControl(data: $input) {\n        id \n        from \n        to \n        command \n        createdAt \n        updatedAt \n  }\n}',
 'createrunbookconnectorformlink': '\n  mutation createRunbookConnectorFormLink($input: RunbookConnectorFormLinkCreateInput!) {\n    createRunbookConnectorFormLink(data: $input) {\n        id \n        createdAt \n        updatedAt \n        connectorFormId \n        connectorForm  {\n          id \n          createdAt \n          updatedAt \n          name \n          connectorID \n          connector  {\n            id \n            createdAt \n            updatedAt \n            category \n            name \n            description \n            detaileddescription \n            iconPath \n            version \n            md5 \n            source \n            configuration \n            commands \n            commandsType \n            script \n            scriptType \n            scriptPath \n            owner \n  }\n\n          configData \n          commandData \n          nodeData \n          scope \n          owner \n  }\n\n        runbookId \n        runbook  {\n          id \n          name \n          description \n          content \n          author \n          commands \n          createdAt \n          updatedAt \n          RunBookConnectors \n          type \n          longSave \n          rbVars \n          scope \n  }\n\n  }\n}',
 'createschedpbs': '\n  mutation createSchedPBs($input: SchedPBsCreateInput!) {\n    createSchedPBs(data: $input) {\n        id \n        pbId \n        frequency \n        pbName \n        rbVars \n        scheduled \n        createdAt \n        updatedAt \n        author \n  }\n}',
 'createstash': '\n  mutation createStash($input: StashCreateInput!) {\n    createStash(data: $input) {\n        id \n        Key \n        Value \n        createdAt \n        updatedAt \n        author \n        scope \n  }\n}',
 'createuser': '\n  mutation createUser($input: UserCreateInput!) {\n    createUser(data: $input) {\n        id \n        username \n        email \n        firstname \n        lastname \n        avatar \n        mood \n        name \n        role \n        status \n        timezone \n        phone \n        address \n        location \n        password \n        createdAt \n        updatedAt \n  }\n}',
 'createusersetting': '\n  mutation createUserSetting($input: UserSettingCreateInput!) {\n    createUserSetting(data: $input) {\n        id \n        userId \n        owner \n        createdAt \n        updatedAt \n        value \n        url \n        name \n        type \n        showWelcomeNext \n        showWelcomeSkip \n        showWelcomeRemind \n        welcomeData \n  }\n}',
 'deleteallrunbooks': '\n  mutation deleteAllRunbooks($input: AllRunbooksWhereUniqueInput!) {\n    deleteAllRunbooks(where: $input) {\n        id \n        name \n        description \n        content \n        author \n        commands \n        createdAt \n        updatedAt \n        RunBookConnectors \n        type \n        longSave \n        rbVars \n        scope \n  }\n}',
 'deletebase64image': '\n  mutation deleteBase64Image($input: Base64ImageWhereUniqueInput!) {\n    deleteBase64Image(where: $input) {\n        id \n        playbookID \n        base64String \n        createdAt \n        updatedAt \n  }\n}',
 'deletecomment': '\n  mutation deleteComment($input: CommentWhereUniqueInput!) {\n    deleteComment(where: $input) {\n        id \n        parent \n        createdAt \n        updatedAt \n        author \n        content \n        type \n        links \n        investigation  {\n          id \n          title \n          from \n          createdAt \n          currentState \n          HumanID \n          severity \n          priority \n          location \n          updatedAt \n          resolvedTime \n          resolvedComment \n  }\n\n        investigationId \n  }\n}',
 'deleteconnectorform': '\n  mutation deleteConnectorForm($input: ConnectorFormWhereUniqueInput!) {\n    deleteConnectorForm(where: $input) {\n        id \n        createdAt \n        updatedAt \n        name \n        connectorID \n        connector  {\n          id \n          createdAt \n          updatedAt \n          category \n          name \n          description \n          detaileddescription \n          iconPath \n          version \n          md5 \n          source \n          configuration \n          commands \n          commandsType \n          script \n          scriptType \n          scriptPath \n          owner \n  }\n\n        configData \n        commandData \n        nodeData \n        scope \n        owner \n  }\n}',
 'deleteconnectors': '\n  mutation deleteConnectors($input: ConnectorsWhereUniqueInput!) {\n    deleteConnectors(where: $input) {\n        id \n        createdAt \n        updatedAt \n        category \n        name \n        description \n        detaileddescription \n        iconPath \n        version \n        md5 \n        source \n        configuration \n        commands \n        commandsType \n        script \n        scriptType \n        scriptPath \n        owner \n  }\n}',
 'deleteexecutedrunbooks': '\n  mutation deleteExecutedRunbooks($input: ExecutedRunbooksWhereUniqueInput!) {\n    deleteExecutedRunbooks(where: $input) {\n        id \n        createdAt \n        updatedAt \n        runbookID \n        runbook  {\n          id \n          name \n          description \n          content \n          author \n          commands \n          createdAt \n          updatedAt \n          RunBookConnectors \n          type \n          longSave \n          rbVars \n          scope \n  }\n\n        investigationId \n        investigation  {\n          id \n          title \n          from \n          createdAt \n          currentState \n          HumanID \n          severity \n          priority \n          location \n          updatedAt \n          resolvedTime \n          resolvedComment \n  }\n\n        output \n        outputType \n        title \n        state \n        author \n        rbVars \n        callbackUrl \n        callbackData \n        source \n  }\n}',
 'deleteinvestigation': '\n  mutation deleteInvestigation($input: InvestigationWhereUniqueInput!) {\n    deleteInvestigation(where: $input) {\n        id \n        title \n        from \n        createdAt \n        currentState \n        HumanID \n        severity \n        priority \n        location \n        updatedAt \n        resolvedTime \n        resolvedComment \n  }\n}',
 'deleteinvestigationevent': '\n  mutation deleteInvestigationEvent($input: InvestigationEventWhereUniqueInput!) {\n    deleteInvestigationEvent(where: $input) {\n        id \n        createdAt \n        updatedAt \n        author \n        content \n        type \n        investigation  {\n          id \n          title \n          from \n          createdAt \n          currentState \n          HumanID \n          severity \n          priority \n          location \n          updatedAt \n          resolvedTime \n          resolvedComment \n  }\n\n        investigationId \n  }\n}',
 'deletelabel': '\n  mutation deleteLabel($input: LabelWhereUniqueInput!) {\n    deleteLabel(where: $input) {\n        id \n        name \n        color \n        type \n  }\n}',
 'deletenotification': '\n  mutation deleteNotification($input: NotificationWhereUniqueInput!) {\n    deleteNotification(where: $input) {\n        id \n        userName \n        content \n        containerType \n        containerId \n        investigationId \n        isViewed \n        createdAt \n        updatedAt \n  }\n}',
 'deleteremotecontrol': '\n  mutation deleteremoteControl($input: remoteControlWhereUniqueInput!) {\n    deleteremoteControl(where: $input) {\n        id \n        from \n        to \n        command \n        createdAt \n        updatedAt \n  }\n}',
 'deleterunbookconnectorformlink': '\n  mutation deleteRunbookConnectorFormLink($input: RunbookConnectorFormLinkWhereUniqueInput!) {\n    deleteRunbookConnectorFormLink(where: $input) {\n        id \n        createdAt \n        updatedAt \n        connectorFormId \n        connectorForm  {\n          id \n          createdAt \n          updatedAt \n          name \n          connectorID \n          connector  {\n            id \n            createdAt \n            updatedAt \n            category \n            name \n            description \n            detaileddescription \n            iconPath \n            version \n            md5 \n            source \n            configuration \n            commands \n            commandsType \n            script \n            scriptType \n            scriptPath \n            owner \n  }\n\n          configData \n          commandData \n          nodeData \n          scope \n          owner \n  }\n\n        runbookId \n        runbook  {\n          id \n          name \n          description \n          content \n          author \n          commands \n          createdAt \n          updatedAt \n          RunBookConnectors \n          type \n          longSave \n          rbVars \n          scope \n  }\n\n  }\n}',
 'deleteschedpbs': '\n  mutation deleteSchedPBs($input: SchedPBsWhereUniqueInput!) {\n    deleteSchedPBs(where: $input) {\n        id \n        pbId \n        frequency \n        pbName \n        rbVars \n        scheduled \n        createdAt \n        updatedAt \n        author \n  }\n}',
 'deletestash': '\n  mutation deleteStash($input: StashWhereUniqueInput!) {\n    deleteStash(where: $input) {\n        id \n        Key \n        Value \n        createdAt \n        updatedAt \n        author \n        scope \n  }\n}',
 'deleteuser': '\n  mutation deleteUser($input: UserWhereUniqueInput!) {\n    deleteUser(where: $input) {\n        id \n        username \n        email \n        firstname \n        lastname \n        avatar \n        mood \n        name \n        role \n        status \n        timezone \n        phone \n        address \n        location \n        password \n        createdAt \n        updatedAt \n  }\n}',
 'deleteusersetting': '\n  mutation deleteUserSetting($input: UserSettingWhereUniqueInput!) {\n    deleteUserSetting(where: $input) {\n        id \n        userId \n        owner \n        createdAt \n        updatedAt \n        value \n        url \n        name \n        type \n        showWelcomeNext \n        showWelcomeSkip \n        showWelcomeRemind \n        welcomeData \n  }\n}',
 'getallrunbooks': '\n  query allRunbooks(\n    $filter: AllRunbooksWhereUniqueInput!\n  ) {\n    allRunbooks(where: $filter) {\n        id \n        name \n        description \n        content \n        author \n        commands \n        createdAt \n        updatedAt \n        RunBookConnectors \n        type \n        longSave \n        rbVars \n        scope \n  }\n}',
 'getbase64image': '\n  query base64Image(\n    $filter: Base64ImageWhereUniqueInput!\n  ) {\n    base64Image(where: $filter) {\n        id \n        playbookID \n        base64String \n        createdAt \n        updatedAt \n  }\n}',
 'getcomment': '\n  query comment(\n    $filter: CommentWhereUniqueInput!\n  ) {\n    comment(where: $filter) {\n        id \n        parent \n        createdAt \n        updatedAt \n        author \n        content \n        type \n        links \n        investigation  {\n          id \n          title \n          from \n          createdAt \n          currentState \n          HumanID \n          severity \n          priority \n          location \n          updatedAt \n          resolvedTime \n          resolvedComment \n  }\n\n        investigationId \n  }\n}',
 'getconnectorform': '\n  query connectorForm(\n    $filter: ConnectorFormWhereUniqueInput!\n  ) {\n    connectorForm(where: $filter) {\n        id \n        createdAt \n        updatedAt \n        name \n        connectorID \n        connector  {\n          id \n          createdAt \n          updatedAt \n          category \n          name \n          description \n          detaileddescription \n          iconPath \n          version \n          md5 \n          source \n          configuration \n          commands \n          commandsType \n          script \n          scriptType \n          scriptPath \n          owner \n  }\n\n        configData \n        commandData \n        nodeData \n        scope \n        owner \n  }\n}',
 'getconnectors': '\n  query connectors(\n    $filter: ConnectorsWhereUniqueInput!\n  ) {\n    connectors(where: $filter) {\n        id \n        createdAt \n        updatedAt \n        category \n        name \n        description \n        detaileddescription \n        iconPath \n        version \n        md5 \n        source \n        configuration \n        commands \n        commandsType \n        script \n        scriptType \n        scriptPath \n        owner \n  }\n}',
 'getexecutedrunbooks': '\n  query executedRunbooks(\n    $filter: ExecutedRunbooksWhereUniqueInput!\n  ) {\n    executedRunbooks(where: $filter) {\n        id \n        createdAt \n        updatedAt \n        runbookID \n        runbook  {\n          id \n          name \n          description \n          content \n          author \n          commands \n          createdAt \n          updatedAt \n          RunBookConnectors \n          type \n          longSave \n          rbVars \n          scope \n  }\n\n        investigationId \n        investigation  {\n          id \n          title \n          from \n          createdAt \n          currentState \n          HumanID \n          severity \n          priority \n          location \n          updatedAt \n          resolvedTime \n          resolvedComment \n  }\n\n        output \n        outputType \n        title \n        state \n        author \n        rbVars \n        callbackUrl \n        callbackData \n        source \n  }\n}',
 'getinvestigation': '\n  query investigation(\n    $filter: InvestigationWhereUniqueInput!\n  ) {\n    investigation(where: $filter) {\n        id \n        title \n        from \n        createdAt \n        currentState \n        HumanID \n        severity \n        priority \n        location \n        updatedAt \n        resolvedTime \n        resolvedComment \n  }\n}',
 'getinvestigationevent': '\n  query investigationEvent(\n    $filter: InvestigationEventWhereUniqueInput!\n  ) {\n    investigationEvent(where: $filter) {\n        id \n        createdAt \n        updatedAt \n        author \n        content \n        type \n        investigation  {\n          id \n          title \n          from \n          createdAt \n          currentState \n          HumanID \n          severity \n          priority \n          location \n          updatedAt \n          resolvedTime \n          resolvedComment \n  }\n\n        investigationId \n  }\n}',
 'getlabel': '\n  query label(\n    $filter: LabelWhereUniqueInput!\n  ) {\n    label(where: $filter) {\n        id \n        name \n        color \n        type \n  }\n}',
 'getnotification': '\n  query notification(\n    $filter: NotificationWhereUniqueInput!\n  ) {\n    notification(where: $filter) {\n        id \n        userName \n        content \n        containerType \n        containerId \n        investigationId \n        isViewed \n        createdAt \n        updatedAt \n  }\n}',
 'getremotecontrol': '\n  query remoteControl(\n    $filter: remoteControlWhereUniqueInput!\n  ) {\n    remoteControl(where: $filter) {\n        id \n        from \n        to \n        command \n        createdAt \n        updatedAt \n  }\n}',
 'getrunbookconnectorformlink': '\n  query runbookConnectorFormLink(\n    $filter: RunbookConnectorFormLinkWhereUniqueInput!\n  ) {\n    runbookConnectorFormLink(where: $filter) {\n        id \n        createdAt \n        updatedAt \n        connectorFormId \n        connectorForm  {\n          id \n          createdAt \n          updatedAt \n          name \n          connectorID \n          connector  {\n            id \n            createdAt \n            updatedAt \n            category \n            name \n            description \n            detaileddescription \n            iconPath \n            version \n            md5 \n            source \n            configuration \n            commands \n            commandsType \n            script \n            scriptType \n            scriptPath \n            owner \n  }\n\n          configData \n          commandData \n          nodeData \n          scope \n          owner \n  }\n\n        runbookId \n        runbook  {\n          id \n          name \n          description \n          content \n          author \n          commands \n          createdAt \n          updatedAt \n          RunBookConnectors \n          type \n          longSave \n          rbVars \n          scope \n  }\n\n  }\n}',
 'getschedpbs': '\n  query schedPBs(\n    $filter: SchedPBsWhereUniqueInput!\n  ) {\n    schedPBs(where: $filter) {\n        id \n        pbId \n        frequency \n        pbName \n        rbVars \n        scheduled \n        createdAt \n        updatedAt \n        author \n  }\n}',
 'getstash': '\n  query stash(\n    $filter: StashWhereUniqueInput!\n  ) {\n    stash(where: $filter) {\n        id \n        Key \n        Value \n        createdAt \n        updatedAt \n        author \n        scope \n  }\n}',
 'getuser': '\n  query user(\n    $filter: UserWhereUniqueInput!\n  ) {\n    user(where: $filter) {\n        id \n        username \n        email \n        firstname \n        lastname \n        avatar \n        mood \n        name \n        role \n        status \n        timezone \n        phone \n        address \n        location \n        password \n        createdAt \n        updatedAt \n  }\n}',
 'getusersetting': '\n  query userSetting(\n    $filter: UserSettingWhereUniqueInput!\n  ) {\n    userSetting(where: $filter) {\n        id \n        userId \n        owner \n        createdAt \n        updatedAt \n        value \n        url \n        name \n        type \n        showWelcomeNext \n        showWelcomeSkip \n        showWelcomeRemind \n        welcomeData \n  }\n}',
 'listallrunbookses': '\n  query allRunbookses(\n    $filter: AllRunbooksWhereInput, $orderBy: AllRunbooksOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int\n  ) {\n    allRunbookses(where: $filter, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {\n        id \n        name \n        description \n        content \n        author \n        commands \n        createdAt \n        updatedAt \n        RunBookConnectors \n        type \n        longSave \n        rbVars \n        scope \n  }\n}',
 'listbase64images': '\n  query base64Images(\n    $filter: Base64ImageWhereInput, $orderBy: Base64ImageOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int\n  ) {\n    base64Images(where: $filter, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {\n        id \n        playbookID \n        base64String \n        createdAt \n        updatedAt \n  }\n}',
 'listcomments': '\n  query comments(\n    $filter: CommentWhereInput, $orderBy: CommentOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int\n  ) {\n    comments(where: $filter, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {\n        id \n        parent \n        createdAt \n        updatedAt \n        author \n        content \n        type \n        links \n        investigation  {\n          id \n          title \n          from \n          createdAt \n          currentState \n          HumanID \n          severity \n          priority \n          location \n          updatedAt \n          resolvedTime \n          resolvedComment \n  }\n\n        investigationId \n  }\n}',
 'listconnectorforms': '\n  query connectorForms(\n    $filter: ConnectorFormWhereInput, $orderBy: ConnectorFormOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int\n  ) {\n    connectorForms(where: $filter, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {\n        id \n        createdAt \n        updatedAt \n        name \n        connectorID \n        connector  {\n          id \n          createdAt \n          updatedAt \n          category \n          name \n          description \n          detaileddescription \n          iconPath \n          version \n          md5 \n          source \n          configuration \n          commands \n          commandsType \n          script \n          scriptType \n          scriptPath \n          owner \n  }\n\n        configData \n        commandData \n        nodeData \n        scope \n        owner \n  }\n}',
 'listconnectorses': '\n  query connectorses(\n    $filter: ConnectorsWhereInput, $orderBy: ConnectorsOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int\n  ) {\n    connectorses(where: $filter, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {\n        id \n        createdAt \n        updatedAt \n        category \n        name \n        description \n        detaileddescription \n        iconPath \n        version \n        md5 \n        source \n        configuration \n        commands \n        commandsType \n        script \n        scriptType \n        scriptPath \n        owner \n  }\n}',
 'listexecutedrunbookses': '\n  query executedRunbookses(\n    $filter: ExecutedRunbooksWhereInput, $orderBy: ExecutedRunbooksOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int\n  ) {\n    executedRunbookses(where: $filter, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {\n        id \n        createdAt \n        updatedAt \n        runbookID \n        runbook  {\n          id \n          name \n          description \n          content \n          author \n          commands \n          createdAt \n          updatedAt \n          RunBookConnectors \n          type \n          longSave \n          rbVars \n          scope \n  }\n\n        investigationId \n        investigation  {\n          id \n          title \n          from \n          createdAt \n          currentState \n          HumanID \n          severity \n          priority \n          location \n          updatedAt \n          resolvedTime \n          resolvedComment \n  }\n\n        output \n        outputType \n        title \n        state \n        author \n        rbVars \n        callbackUrl \n        callbackData \n        source \n  }\n}',
 'listinvestigationevents': '\n  query investigationEvents(\n    $filter: InvestigationEventWhereInput, $orderBy: InvestigationEventOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int\n  ) {\n    investigationEvents(where: $filter, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {\n        id \n        createdAt \n        updatedAt \n        author \n        content \n        type \n        investigation  {\n          id \n          title \n          from \n          createdAt \n          currentState \n          HumanID \n          severity \n          priority \n          location \n          updatedAt \n          resolvedTime \n          resolvedComment \n  }\n\n        investigationId \n  }\n}',
 'listinvestigations': '\n  query investigations(\n    $filter: InvestigationWhereInput, $orderBy: InvestigationOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int\n  ) {\n    investigations(where: $filter, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {\n        id \n        title \n        from \n        createdAt \n        currentState \n        HumanID \n        severity \n        priority \n        location \n        updatedAt \n        resolvedTime \n        resolvedComment \n  }\n}',
 'listlabels': '\n  query labels(\n    $filter: LabelWhereInput, $orderBy: LabelOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int\n  ) {\n    labels(where: $filter, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {\n        id \n        name \n        color \n        type \n  }\n}',
 'listnotifications': '\n  query notifications(\n    $filter: NotificationWhereInput, $orderBy: NotificationOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int\n  ) {\n    notifications(where: $filter, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {\n        id \n        userName \n        content \n        containerType \n        containerId \n        investigationId \n        isViewed \n        createdAt \n        updatedAt \n  }\n}',
 'listremotecontrols': '\n  query remoteControls(\n    $filter: remoteControlWhereInput, $orderBy: remoteControlOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int\n  ) {\n    remoteControls(where: $filter, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {\n        id \n        from \n        to \n        command \n        createdAt \n        updatedAt \n  }\n}',
 'listrunbookconnectorformlinks': '\n  query runbookConnectorFormLinks(\n    $filter: RunbookConnectorFormLinkWhereInput, $orderBy: RunbookConnectorFormLinkOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int\n  ) {\n    runbookConnectorFormLinks(where: $filter, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {\n        id \n        createdAt \n        updatedAt \n        connectorFormId \n        connectorForm  {\n          id \n          createdAt \n          updatedAt \n          name \n          connectorID \n          connector  {\n            id \n            createdAt \n            updatedAt \n            category \n            name \n            description \n            detaileddescription \n            iconPath \n            version \n            md5 \n            source \n            configuration \n            commands \n            commandsType \n            script \n            scriptType \n            scriptPath \n            owner \n  }\n\n          configData \n          commandData \n          nodeData \n          scope \n          owner \n  }\n\n        runbookId \n        runbook  {\n          id \n          name \n          description \n          content \n          author \n          commands \n          createdAt \n          updatedAt \n          RunBookConnectors \n          type \n          longSave \n          rbVars \n          scope \n  }\n\n  }\n}',
 'listschedpbses': '\n  query schedPBses(\n    $filter: SchedPBsWhereInput, $orderBy: SchedPBsOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int\n  ) {\n    schedPBses(where: $filter, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {\n        id \n        pbId \n        frequency \n        pbName \n        rbVars \n        scheduled \n        createdAt \n        updatedAt \n        author \n  }\n}',
 'liststashes': '\n  query stashes(\n    $filter: StashWhereInput, $orderBy: StashOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int\n  ) {\n    stashes(where: $filter, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {\n        id \n        Key \n        Value \n        createdAt \n        updatedAt \n        author \n        scope \n  }\n}',
 'listusers': '\n  query users(\n    $filter: UserWhereInput, $orderBy: UserOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int\n  ) {\n    users(where: $filter, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {\n        id \n        username \n        email \n        firstname \n        lastname \n        avatar \n        mood \n        name \n        role \n        status \n        timezone \n        phone \n        address \n        location \n        password \n        createdAt \n        updatedAt \n  }\n}',
 'listusersettings': '\n  query userSettings(\n    $filter: UserSettingWhereInput, $orderBy: UserSettingOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int\n  ) {\n    userSettings(where: $filter, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {\n        id \n        userId \n        owner \n        createdAt \n        updatedAt \n        value \n        url \n        name \n        type \n        showWelcomeNext \n        showWelcomeSkip \n        showWelcomeRemind \n        welcomeData \n  }\n}',
 'onallrunbooks': '\n  subscription allRunbooks($where: AllRunbooksSubscriptionWhereInput) { allRunbooks(where: $where) {\n    mutation\n    updatedFields\n    node {\n        id \n        name \n        description \n        content \n        author \n        commands \n        createdAt \n        updatedAt \n        RunBookConnectors \n        type \n        longSave \n        rbVars \n        scope \n  }\n\n    previousValues {\n        id \n        name \n        description \n        content \n        author \n        commands \n        createdAt \n        updatedAt \n        RunBookConnectors \n        type \n        longSave \n        rbVars \n        scope \n  }\n}}',
 'onbase64image': '\n  subscription base64Image($where: Base64ImageSubscriptionWhereInput) { base64Image(where: $where) {\n    mutation\n    updatedFields\n    node {\n        id \n        playbookID \n        base64String \n        createdAt \n        updatedAt \n  }\n\n    previousValues {\n        id \n        playbookID \n        base64String \n        createdAt \n        updatedAt \n  }\n}}',
 'oncomment': '\n  subscription comment($where: CommentSubscriptionWhereInput) { comment(where: $where) {\n    mutation\n    updatedFields\n    node {\n        id \n        parent \n        createdAt \n        updatedAt \n        author \n        content \n        type \n        links \n        investigation  {\n          id \n          title \n          from \n          createdAt \n          currentState \n          HumanID \n          severity \n          priority \n          location \n          updatedAt \n          resolvedTime \n          resolvedComment \n  }\n\n        investigationId \n  }\n\n    previousValues {\n        id \n        parent \n        createdAt \n        updatedAt \n        author \n        content \n        type \n        links \n                investigationId \n  }\n}}',
 'onconnectorform': '\n  subscription connectorForm($where: ConnectorFormSubscriptionWhereInput) { connectorForm(where: $where) {\n    mutation\n    updatedFields\n    node {\n        id \n        createdAt \n        updatedAt \n        name \n        connectorID \n        connector  {\n          id \n          createdAt \n          updatedAt \n          category \n          name \n          description \n          detaileddescription \n          iconPath \n          version \n          md5 \n          source \n          configuration \n          commands \n          commandsType \n          script \n          scriptType \n          scriptPath \n          owner \n  }\n\n        configData \n        commandData \n        nodeData \n        scope \n        owner \n  }\n\n    previousValues {\n        id \n        createdAt \n        updatedAt \n        name \n        connectorID \n                configData \n        commandData \n        nodeData \n        scope \n        owner \n  }\n}}',
 'onconnectors': '\n  subscription connectors($where: ConnectorsSubscriptionWhereInput) { connectors(where: $where) {\n    mutation\n    updatedFields\n    node {\n        id \n        createdAt \n        updatedAt \n        category \n        name \n        description \n        detaileddescription \n        iconPath \n        version \n        md5 \n        source \n        configuration \n        commands \n        commandsType \n        script \n        scriptType \n        scriptPath \n        owner \n  }\n\n    previousValues {\n        id \n        createdAt \n        updatedAt \n        category \n        name \n        description \n        detaileddescription \n        iconPath \n        version \n        md5 \n        source \n        configuration \n        commands \n        commandsType \n        script \n        scriptType \n        scriptPath \n        owner \n  }\n}}',
 'onexecutedrunbooks': '\n  subscription executedRunbooks($where: ExecutedRunbooksSubscriptionWhereInput) { executedRunbooks(where: $where) {\n    mutation\n    updatedFields\n    node {\n        id \n        createdAt \n        updatedAt \n        runbookID \n        runbook  {\n          id \n          name \n          description \n          content \n          author \n          commands \n          createdAt \n          updatedAt \n          RunBookConnectors \n          type \n          longSave \n          rbVars \n          scope \n  }\n\n        investigationId \n        investigation  {\n          id \n          title \n          from \n          createdAt \n          currentState \n          HumanID \n          severity \n          priority \n          location \n          updatedAt \n          resolvedTime \n          resolvedComment \n  }\n\n        output \n        outputType \n        title \n        state \n        author \n        rbVars \n        callbackUrl \n        callbackData \n        source \n  }\n\n    previousValues {\n        id \n        createdAt \n        updatedAt \n        runbookID \n                investigationId \n                output \n        outputType \n        title \n        state \n        author \n        rbVars \n        callbackUrl \n        callbackData \n        source \n  }\n}}',
 'oninvestigation': '\n  subscription investigation($where: InvestigationSubscriptionWhereInput) { investigation(where: $where) {\n    mutation\n    updatedFields\n    node {\n        id \n        title \n        from \n        createdAt \n        currentState \n        HumanID \n        severity \n        priority \n        location \n        updatedAt \n        resolvedTime \n        resolvedComment \n  }\n\n    previousValues {\n        id \n        title \n        from \n        createdAt \n        currentState \n        HumanID \n        severity \n        priority \n        location \n        updatedAt \n        resolvedTime \n        resolvedComment \n  }\n}}',
 'oninvestigationevent': '\n  subscription investigationEvent($where: InvestigationEventSubscriptionWhereInput) { investigationEvent(where: $where) {\n    mutation\n    updatedFields\n    node {\n        id \n        createdAt \n        updatedAt \n        author \n        content \n        type \n        investigation  {\n          id \n          title \n          from \n          createdAt \n          currentState \n          HumanID \n          severity \n          priority \n          location \n          updatedAt \n          resolvedTime \n          resolvedComment \n  }\n\n        investigationId \n  }\n\n    previousValues {\n        id \n        createdAt \n        updatedAt \n        author \n        content \n        type \n                investigationId \n  }\n}}',
 'onlabel': '\n  subscription label($where: LabelSubscriptionWhereInput) { label(where: $where) {\n    mutation\n    updatedFields\n    node {\n        id \n        name \n        color \n        type \n  }\n\n    previousValues {\n        id \n        name \n        color \n        type \n  }\n}}',
 'onnotification': '\n  subscription notification($where: NotificationSubscriptionWhereInput) { notification(where: $where) {\n    mutation\n    updatedFields\n    node {\n        id \n        userName \n        content \n        containerType \n        containerId \n        investigationId \n        isViewed \n        createdAt \n        updatedAt \n  }\n\n    previousValues {\n        id \n        userName \n        content \n        containerType \n        containerId \n        investigationId \n        isViewed \n        createdAt \n        updatedAt \n  }\n}}',
 'onremotecontrol': '\n  subscription remoteControl($where: remoteControlSubscriptionWhereInput) { remoteControl(where: $where) {\n    mutation\n    updatedFields\n    node {\n        id \n        from \n        to \n        command \n        createdAt \n        updatedAt \n  }\n\n    previousValues {\n        id \n        from \n        to \n        command \n        createdAt \n        updatedAt \n  }\n}}',
 'onrunbookconnectorformlink': '\n  subscription runbookConnectorFormLink($where: RunbookConnectorFormLinkSubscriptionWhereInput) { runbookConnectorFormLink(where: $where) {\n    mutation\n    updatedFields\n    node {\n        id \n        createdAt \n        updatedAt \n        connectorFormId \n        connectorForm  {\n          id \n          createdAt \n          updatedAt \n          name \n          connectorID \n          connector  {\n            id \n            createdAt \n            updatedAt \n            category \n            name \n            description \n            detaileddescription \n            iconPath \n            version \n            md5 \n            source \n            configuration \n            commands \n            commandsType \n            script \n            scriptType \n            scriptPath \n            owner \n  }\n\n          configData \n          commandData \n          nodeData \n          scope \n          owner \n  }\n\n        runbookId \n        runbook  {\n          id \n          name \n          description \n          content \n          author \n          commands \n          createdAt \n          updatedAt \n          RunBookConnectors \n          type \n          longSave \n          rbVars \n          scope \n  }\n\n  }\n\n    previousValues {\n        id \n        createdAt \n        updatedAt \n        connectorFormId \n                runbookId \n          }\n}}',
 'onschedpbs': '\n  subscription schedPBs($where: SchedPBsSubscriptionWhereInput) { schedPBs(where: $where) {\n    mutation\n    updatedFields\n    node {\n        id \n        pbId \n        frequency \n        pbName \n        rbVars \n        scheduled \n        createdAt \n        updatedAt \n        author \n  }\n\n    previousValues {\n        id \n        pbId \n        frequency \n        pbName \n        rbVars \n        scheduled \n        createdAt \n        updatedAt \n        author \n  }\n}}',
 'onstash': '\n  subscription stash($where: StashSubscriptionWhereInput) { stash(where: $where) {\n    mutation\n    updatedFields\n    node {\n        id \n        Key \n        Value \n        createdAt \n        updatedAt \n        author \n        scope \n  }\n\n    previousValues {\n        id \n        Key \n        Value \n        createdAt \n        updatedAt \n        author \n        scope \n  }\n}}',
 'onuser': '\n  subscription user($where: UserSubscriptionWhereInput) { user(where: $where) {\n    mutation\n    updatedFields\n    node {\n        id \n        username \n        email \n        firstname \n        lastname \n        avatar \n        mood \n        name \n        role \n        status \n        timezone \n        phone \n        address \n        location \n        password \n        createdAt \n        updatedAt \n  }\n\n    previousValues {\n        id \n        username \n        email \n        firstname \n        lastname \n        avatar \n        mood \n        name \n        role \n        status \n        timezone \n        phone \n        address \n        location \n        password \n        createdAt \n        updatedAt \n  }\n}}',
 'onusersetting': '\n  subscription userSetting($where: UserSettingSubscriptionWhereInput) { userSetting(where: $where) {\n    mutation\n    updatedFields\n    node {\n        id \n        userId \n        owner \n        createdAt \n        updatedAt \n        value \n        url \n        name \n        type \n        showWelcomeNext \n        showWelcomeSkip \n        showWelcomeRemind \n        welcomeData \n  }\n\n    previousValues {\n        id \n        userId \n        owner \n        createdAt \n        updatedAt \n        value \n        url \n        name \n        type \n        showWelcomeNext \n        showWelcomeSkip \n        showWelcomeRemind \n        welcomeData \n  }\n}}',
 'updateallrunbooks': '\n  mutation updateAllRunbooks($input: AllRunbooksUpdateInput!, $where: AllRunbooksWhereUniqueInput!) {\n    updateAllRunbooks(where: $where, data: $input) {\n        id \n        name \n        description \n        content \n        author \n        commands \n        createdAt \n        updatedAt \n        RunBookConnectors \n        type \n        longSave \n        rbVars \n        scope \n  }\n}',
 'updatebase64image': '\n  mutation updateBase64Image($input: Base64ImageUpdateInput!, $where: Base64ImageWhereUniqueInput!) {\n    updateBase64Image(where: $where, data: $input) {\n        id \n        playbookID \n        base64String \n        createdAt \n        updatedAt \n  }\n}',
 'updatecomment': '\n  mutation updateComment($input: CommentUpdateInput!, $where: CommentWhereUniqueInput!) {\n    updateComment(where: $where, data: $input) {\n        id \n        parent \n        createdAt \n        updatedAt \n        author \n        content \n        type \n        links \n        investigation  {\n          id \n          title \n          from \n          createdAt \n          currentState \n          HumanID \n          severity \n          priority \n          location \n          updatedAt \n          resolvedTime \n          resolvedComment \n  }\n\n        investigationId \n  }\n}',
 'updateconnectorform': '\n  mutation updateConnectorForm($input: ConnectorFormUpdateInput!, $where: ConnectorFormWhereUniqueInput!) {\n    updateConnectorForm(where: $where, data: $input) {\n        id \n        createdAt \n        updatedAt \n        name \n        connectorID \n        connector  {\n          id \n          createdAt \n          updatedAt \n          category \n          name \n          description \n          detaileddescription \n          iconPath \n          version \n          md5 \n          source \n          configuration \n          commands \n          commandsType \n          script \n          scriptType \n          scriptPath \n          owner \n  }\n\n        configData \n        commandData \n        nodeData \n        scope \n        owner \n  }\n}',
 'updateconnectors': '\n  mutation updateConnectors($input: ConnectorsUpdateInput!, $where: ConnectorsWhereUniqueInput!) {\n    updateConnectors(where: $where, data: $input) {\n        id \n        createdAt \n        updatedAt \n        category \n        name \n        description \n        detaileddescription \n        iconPath \n        version \n        md5 \n        source \n        configuration \n        commands \n        commandsType \n        script \n        scriptType \n        scriptPath \n        owner \n  }\n}',
 'updateexecutedrunbooks': '\n  mutation updateExecutedRunbooks($input: ExecutedRunbooksUpdateInput!, $where: ExecutedRunbooksWhereUniqueInput!) {\n    updateExecutedRunbooks(where: $where, data: $input) {\n        id \n        createdAt \n        updatedAt \n        runbookID \n        runbook  {\n          id \n          name \n          description \n          content \n          author \n          commands \n          createdAt \n          updatedAt \n          RunBookConnectors \n          type \n          longSave \n          rbVars \n          scope \n  }\n\n        investigationId \n        investigation  {\n          id \n          title \n          from \n          createdAt \n          currentState \n          HumanID \n          severity \n          priority \n          location \n          updatedAt \n          resolvedTime \n          resolvedComment \n  }\n\n        output \n        outputType \n        title \n        state \n        author \n        rbVars \n        callbackUrl \n        callbackData \n        source \n  }\n}',
 'updateinvestigation': '\n  mutation updateInvestigation($input: InvestigationUpdateInput!, $where: InvestigationWhereUniqueInput!) {\n    updateInvestigation(where: $where, data: $input) {\n        id \n        title \n        from \n        createdAt \n        currentState \n        HumanID \n        severity \n        priority \n        location \n        updatedAt \n        resolvedTime \n        resolvedComment \n  }\n}',
 'updateinvestigationevent': '\n  mutation updateInvestigationEvent($input: InvestigationEventUpdateInput!, $where: InvestigationEventWhereUniqueInput!) {\n    updateInvestigationEvent(where: $where, data: $input) {\n        id \n        createdAt \n        updatedAt \n        author \n        content \n        type \n        investigation  {\n          id \n          title \n          from \n          createdAt \n          currentState \n          HumanID \n          severity \n          priority \n          location \n          updatedAt \n          resolvedTime \n          resolvedComment \n  }\n\n        investigationId \n  }\n}',
 'updatelabel': '\n  mutation updateLabel($input: LabelUpdateInput!, $where: LabelWhereUniqueInput!) {\n    updateLabel(where: $where, data: $input) {\n        id \n        name \n        color \n        type \n  }\n}',
 'updatenotification': '\n  mutation updateNotification($input: NotificationUpdateInput!, $where: NotificationWhereUniqueInput!) {\n    updateNotification(where: $where, data: $input) {\n        id \n        userName \n        content \n        containerType \n        containerId \n        investigationId \n        isViewed \n        createdAt \n        updatedAt \n  }\n}',
 'updateremotecontrol': '\n  mutation updateremoteControl($input: remoteControlUpdateInput!, $where: remoteControlWhereUniqueInput!) {\n    updateremoteControl(where: $where, data: $input) {\n        id \n        from \n        to \n        command \n        createdAt \n        updatedAt \n  }\n}',
 'updaterunbookconnectorformlink': '\n  mutation updateRunbookConnectorFormLink($input: RunbookConnectorFormLinkUpdateInput!, $where: RunbookConnectorFormLinkWhereUniqueInput!) {\n    updateRunbookConnectorFormLink(where: $where, data: $input) {\n        id \n        createdAt \n        updatedAt \n        connectorFormId \n        connectorForm  {\n          id \n          createdAt \n          updatedAt \n          name \n          connectorID \n          connector  {\n            id \n            createdAt \n            updatedAt \n            category \n            name \n            description \n            detaileddescription \n            iconPath \n            version \n            md5 \n            source \n            configuration \n            commands \n            commandsType \n            script \n            scriptType \n            scriptPath \n            owner \n  }\n\n          configData \n          commandData \n          nodeData \n          scope \n          owner \n  }\n\n        runbookId \n        runbook  {\n          id \n          name \n          description \n          content \n          author \n          commands \n          createdAt \n          updatedAt \n          RunBookConnectors \n          type \n          longSave \n          rbVars \n          scope \n  }\n\n  }\n}',
 'updateschedpbs': '\n  mutation updateSchedPBs($input: SchedPBsUpdateInput!, $where: SchedPBsWhereUniqueInput!) {\n    updateSchedPBs(where: $where, data: $input) {\n        id \n        pbId \n        frequency \n        pbName \n        rbVars \n        scheduled \n        createdAt \n        updatedAt \n        author \n  }\n}',
 'updatestash': '\n  mutation updateStash($input: StashUpdateInput!, $where: StashWhereUniqueInput!) {\n    updateStash(where: $where, data: $input) {\n        id \n        Key \n        Value \n        createdAt \n        updatedAt \n        author \n        scope \n  }\n}',
 'updateuser': '\n  mutation updateUser($input: UserUpdateInput!, $where: UserWhereUniqueInput!) {\n    updateUser(where: $where, data: $input) {\n        id \n        username \n        email \n        firstname \n        lastname \n        avatar \n        mood \n        name \n        role \n        status \n        timezone \n        phone \n        address \n        location \n        password \n        createdAt \n        updatedAt \n  }\n}',
 'updateusersetting': '\n  mutation updateUserSetting($input: UserSettingUpdateInput!, $where: UserSettingWhereUniqueInput!) {\n    updateUserSetting(where: $where, data: $input) {\n        id \n        userId \n        owner \n        createdAt \n        updatedAt \n        value \n        url \n        name \n        type \n        showWelcomeNext \n        showWelcomeSkip \n        showWelcomeRemind \n        welcomeData \n  }\n}'}

MODEL_MAPPING = {
       'InvestigationEvent': {'investigation': 'investigationId'},
   'ExecutedRunbooks': {'runbook': 'runbookID', 'investigation': 'investigationId'},
   'RunbookConnectorFormLink': {'connectorForm': 'connectorFormId', 'runbook': 'runbookId'},
   'ConnectorForm': {'connector': 'connectorID'},
   'Comment': {'investigation': 'investigationId'},
 }
MODEL_RELATION    = {
               'AllRunbooks': ['commands', 'RunBookConnectors'],
 }